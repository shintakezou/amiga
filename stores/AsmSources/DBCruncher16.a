 ***************************************************************************
 *                                                                         *
 *                           DBCruncher V1.6                               *
 *                                                                         *
 *                                  by                                     *
 *                                                                         *
 *                            Mauro Panigada                               *
 *                                                                         *
 ***************************************************************************
 
 ; VERSIONE 1.6:
 ;    - Iniziata l'8 Giugno 1995 (domani ci sono i quadri)
 ;    - Usa (se funzionera`) Dynamic Huffman.
 ;    - Scritta solo per implementare il Dynamic Huffman per poi
 ;      trasportarlo nella versione 2.00 intuitionizzata. Quindi senza
 ;      pretesa di eleganza ma solo di funzionalita` dell'algoritmo.
 ;    - Al 14 Settembre 1995 sta ancora allo stesso punto!
 ;    - Bloccata ormai dal 14 Settembre 1995. Oggi: 28 Marzo 1996.
 ;
 ; $VER: DBCruncher v1.6 unfinished
 ;


VERSION		EQU	3		; V1.6 (2.00)
VBIT		EQU	3


		incdir	"dh0:progr/assem/include/"
		include	"exec/types.i"
		include	"exec/libraries.i"
		include	"exec/memory.i"
		include	"exec/exec_lib.i"
		include	"dos/dos.i"
		include	"dos/dosextens.i"
		include	"dos/dos_lib.i"


CALL		MACRO
		jsr	_LVO\1(a6)
		ENDM

_LVOPPLoadData	EQU	-30

ROOT		EQU	-1
RIGHT		EQU	1
LEFT		EQU	0
FFL		EQU	$100	; first free leaf (prima foglia libera)


quickstart	move.l	a0,_argument
		cmp.w	#1,d0		; e gli argomenti?
		beq.s	ciaoveloce
		move.l	4.w,a6
		lea	dosname(pc),a1
		moveq	#0,d0		; almeno V1.3, ma... mah!
		CALL	OpenLibrary
		move.l	d0,_dosbase
		bne.s	aprepp
		move.l	#30,d0		; errore grave!
ciaoveloce	rts

dosname		dc.b	'dos.library',0
		even
ppname		dc.b	'powerpacker.library',0
		even

aprepp		lea	ppname(pc),a1
		moveq	#0,d0			; non so la vers
		CALL	OpenLibrary
		move.l	d0,_ppbase

tuttook		move.l	_argument,a0	; cerca il sorgente
skipspace	cmp.b	#" ",(a0)+	; salta gli spazi iniziali
		beq.s	skipspace
		sub.l	#1,a0
		move.l	a0,_sourcename
cercadest	cmp.b	#" ",(a0)	; cerca la destinazione
		beq.s	founddest
		tst.b	(a0)+
		bne.s	cercadest
		bra	ciaoatutti
founddest	clr.b	(a0)+
skipblank	cmp.b	#" ",(a0)+	; come per il sorgente
		beq.s	skipblank
		sub.l	#1,a0
		move.l	a0,_destname

		move.l	_dosbase,a6	; open source...
		move.l	_sourcename,d1
		move.l	#MODE_OLDFILE,d2
		CALL	Open
		move.l	d0,_sourcehand
		beq	ciaoatutti	; che errore? vallo a scoprire...
		move.l	d0,d1		; ricava la lunghezza
		moveq	#0,d2
		moveq	#OFFSET_END,d3
		CALL	Seek
		move.l	_sourcehand,d1
		moveq	#0,d2
		moveq	#OFFSET_BEGINNING,d3
		CALL	Seek
		move.l	d0,_sourcelength

		move.l	_destname,d1
		move.l	#MODE_NEWFILE,d2
		CALL	Open
		move.l	d0,_desthand
		beq	ciaoatutti

		move.l	_ppbase,d0
		beq	noppload
		move.l	d0,a6
		move.l	_sourcename,a0
		lea	_sourcemem,a1
		lea	_sourcelength,a2
		moveq	#2,d0
		moveq	#MEMF_PUBLIC,d1
		CALL	PPLoadData
		tst.l	d0
		bne.s	noppload
		bra	loadedsource

noppload	move.l	_sourcelength,d0
		move.l	#MEMF_PUBLIC,d1
		move.l	4.w,a6
		CALL	AllocMem	; alloca per read del file
		move.l	d0,_sourcemem
		beq	ciaoatutti
		move.l	_sourcehand,d1
		moveq	#0,d2
		moveq	#OFFSET_BEGINNING,d3
		move.l	_dosbase,a6
		CALL	Seek
		move.l	_sourcehand,d1
		move.l	_sourcemem,d2
		move.l	_sourcelength,d3
		CALL	Read
		cmp.l	_sourcelength,d0
		bne	ciaoatutti

loadedsource	move.l	_sourcelength,d0	; alloca per il
		move.l	d0,_destlength
		move.l	#MEMF_PUBLIC,d1		; crunch crunch...
		CALL	AllocMem
		move.l	d0,_destmem
		beq	ciaoatutti

		move.l	_dosbase,a6	; ricava l'output
		CALL	Output
		move.l	d0,_output

		move.l	_sourcemem,a0
		cmp.l	#"DBCR",(a0)
		beq	depackdynamic


;###########################################################################

packdynamic	lea	message1(pc),a0
		bsr	_write
		move.l	_destmem,_putmem
		bsr	_allocbuff
		move.w	#FFL,_ffl
		move.l	_codice,a4		; a4 = _codice
		move.l	_freq,a5		; a5 = _freq
		move.l	_genitore,a6		; a6 = _genitore

_pack		move.l	_sourcelength,d7	; d7 = lung. file
		move.l	_sourcemem,a3		; a3 = source mem
		move.b	(a3)+,d0
		and.w	#$00ff,d0
		move.w	#ROOT,d1
		moveq	#1,d2
		moveq	#RIGHT,d3
		bsr	_newcode
		moveq	#-1,d0	; foglia vuota
		move.w	#ROOT,d1
		moveq	#0,d2	; no frequenza
		moveq	#LEFT,d3
		bsr	_newcode
		move.b	-1(a3),d0
		moveq	#8,d1
		bsr	_putbit
p_loop		move.b	(a3)+,d0
		move.b	d0,d1
		and.w	#$ff,d1
		lsl.l	#2,d1	; *4 per indicizzare array freq
		tst.l	(a5,d1)
		beq	newchar
old_char	bsr	_outcc
		bra	loopin
newchar		bsr	_outfl
		move.b	-1(a3),d0
		moveq	#8,d1
		bsr	_putbit
		move.w	_ffl,d0
		bsr	_inc_ord
		tst.w	_numchar
		beq	caseelse
caseif		move.b	-1(a3),d0
		

		bsr	_freebuff
		bra	ciaoatutti

message1	dc.b	10,"CRUNCHING FILE...",10,0
		even
message2	dc.b	"DONE.",10,10,0
		even

;###########################################################################

;###########################################################################

depackdynamic	move.l	_destmem,a1	;dealloca la memoria destinazione,
		move.l	_sourcelength,d0	; che al file decompresso
		move.l	4.w,a6		; starebbe strettina!
		CALL	FreeMem
		clr.l	_destmem

		adda.l	#4,a0		; salta "DBCR"
		move.l	(a0)+,d0
		;move.w	(a0),_filecrc	; a che serve questo finto di CRC?
		move.l	d0,d1
		lsl.l	#VBIT,d0	; = and.l #$1fffffff,d0 ma e`
		lsr.l	#VBIT,d0	; ben (!) 2 byte piu` corto!
		move.l	d0,_destlength
		and.l	#$e0000000,d1
		rol.l	#VBIT,d1
		cmp.b	#VERSION,d1
		bne	ciaoatutti

		move.l	#MEMF_PUBLIC,d1
		CALL	AllocMem
		move.l	d0,_destmem
		beq	ciaoatutti

		lea	message3(pc),a0
		bsr	_write
		move.l	_sourcemem,_getbit
		bsr	_allocbuff

_depack
		bsr	_freebuff
		bra	ciaoatutti


message3	dc.b	10,"DECRUNCHING FILE...",10,0
		even

;###########################################################################


ciaoatutti
ciao1		move.l	_sourcemem,d0
		beq.s	ciao2
		move.l	d0,a1
		move.l	_sourcelength,d0
		move.l	4.w,a6
		CALL	FreeMem
ciao2		move.l	_destmem,d0
		beq.s	ciao3
		move.l	d0,a1
		move.l	_sourcelength,d0
		move.l	4.w,a6
		CALL	FreeMem
ciao3		move.l	_sourcehand,d1
		beq.s	ciao4
		move.l	_dosbase,a6
		CALL	Close
ciao4		move.l	_desthand,d1
		beq.s	ciao5
		move.l	_dosbase,a6
		CALL	Close
ciao5		move.l	_ppbase,d0
		beq.s	ciao6
		move.l	d0,a1
		move.l	4.w,a6
		CALL	CloseLibrary
ciao6		move.l	_dosbase,a1
		move.l	4.w,a6
		CALL	CloseLibrary
		rts


;***************************************************************************
;***************************************************************************

_argument	dc.l	0
_dosbase	dc.l	0
_ppbase		dc.l	0
_sourcename	dc.l	0
_destname	dc.l	0
_sourcehand	dc.l	0
_sourcelength	dc.l	0
_sourcemem	dc.l	0
_destmem	dc.l	0
_desthand	dc.l	0
_destlength	dc.l	0
_output		dc.l	0
_flen		dc.l	0	; lunghezza del file compresso

_numchar	dc.w	256

_codice		dc.l	0	; ptr a lista di 256*2 word
_freq		dc.l	0	; ptr a lista frequenze (256*2 long)
_genitore	dc.l	0	; ptr a lista genitori (256*2 word)
_ffl

bitdata		EQU	0
counter		EQU	1

bitsmem
_bitdata	dc.b	0	; bit da scrivere (16 bit x volta)
_counter	dc.b	8	; contatore (all'inizio 16)
_getmem		dc.l	0	; per getmem
_putmem		dc.l	0	; per putmem

;***************************************************************************
;***************************************************************************

;===========================================================================
_write		move.l	_dosbase,a6
		move.l	a0,d2
		move.l	_output,d1
		moveq	#0,d3
lenloop		tst.b	(a0)+
		beq.s	dowrite
		addq.w	#1,d3
		bra.s	lenloop
dowrite		CALL	Write
		;move.l	a6,d0
		rts

;===========================================================================
; < d0 = numero di bit da prendere
; > d0 = bit richiesti (%ABCDxxxx $xx -> prendi 4 bit -> $00 %0000ABCD)
; * a differenza dell'altra versione, legge a multipli di byte.
; * inizializzazione _bitdata lasciata al chiamante!
_getbit		move.b	_counter,d1	; num bit ancora nel buffer
		move.b	_bitdata,d2	; buffer di dati (byte)
		move.l	_getmem,a0
		moveq	#0,d3	; buffer finale (.l) 32 bit
		subq.w	#1,d0	; per dbf...
getbloop	lsl.b	#1,d2	; << 1, esce un bit a zero o a uno...
		addx.l	d3,d3	; li riversa nella dest
		sub.b	#1,d1	; finito il buffer?
		bne.s	inloop	; no
reloadbuffer	move.b	(a0)+,d2	; si`! prende byte successivo
		move.b	#8,d1	; e ripristina counter
inloop		dbf	d0,getbloop
		move.b	d1,_counter	; memorizza attuale counter
		move.b	d2,_bitdata	; pure dove ero arrivato a bit
		move.l	a0,_getmem	; pure dove ero arrivato a byte!
		;move.w	d2,$dff180	; sono vivo?
		move.l	d3,d0
		rts

;===========================================================================
; < d0 = bit dati da riversare (allineati a destra alla long)
; < d1 = quanti bit prendere
; * _bitdata la prima volta deve essere a zero, _counter = 8
; * _putmem e` la memoria destinazione
; * d0.l = $000000 %0000abcd -> .. %abcd .. (con d1=4)
_putbit		moveq	#32,d2		; allinea a sinistra (.l)
		sub.b	d1,d2		; questo si fa affinche` poi
		lsl.l	d2,d0		; i bit vengano scritti "di se-
		move.b	_counter,d2	; guito" e non in ordine inverso
		move.b	_bitdata,d3	; come avverrebbe.
		move.l	_putmem,a0
		lea	_flen,a1	; per velocita`
		subq.w	#1,d1	; per il resto, simile a _getbit
putbloop	lsl.l	#1,d0	; ma questo e` la "sorgente di bit"...
		addx.b	d3,d3	 ; .b perche` terminato il buffer deve
		sub.b	#1,d2	 ; scriverlo a byte e non a long ne` a
		bne.s	pinloop	 ; word...
storebuff	moveq	#0,d4
		move.w	#7,d2
invloop		move.b	d3,(a0)+	; ...e questa la discarica...
		addq.l	#1,(a1)
		move.b	#8,d2
		moveq	#0,d3
pinloop		dbf	d1,putbloop
		move.b	d2,_counter
		move.b	d3,_bitdata
		move.l	a0,_putmem
		rts

;===========================================================================
_allocbuff	move.l	4.w,a6
		move.l	#((256*2)*2),d0
		move.l	#MEMF_PUBLIC!MEMF_CLEAR,d1
		CALL	AllocMem
		move.l	d0,_codice
		move.l	#((256*2)*4),d0
		move.l	#MEMF_PUBLIC!MEMF_CLEAR,d1
		CALL	AllocMem
		move.l	d0,_freq
		move.l	#((256*2)*2),d0
		move.l	#MEMF_PUBLIC!MEMF_CLEAR,d1
		CALL	AllocMem
		move.l	d0,_genitore
		rts

;===========================================================================
_freebuff	move.l	4.w,a6
		move.l	_codice,a1
		move.l	#(256*2*2),d0
		CALL	FreeMem
		move.l	_freq,a1
		move.l	#(256*2*4),d0
		CALL	FreeMem
		move.l	_genitore,a1
		move.l	#(256*2*2),d0
		CALL	FreeMem
		rts

;===========================================================================
; d0 = nuovo codice da inserire (-1.w = foglia vuota)
; d1 = nodo genitore (~0.w root?)()
; d2 = frequenza del codice
; d3 = ramo (0.b = sinistro, 1.b = destro)
_newcode	rts

;===========================================================================
; d0 = carattere (-1.w = foglia vuota)
_inc_sort	rts

;===========================================================================
; OutCC = output codec char
; d0 = carattere normale.
_outcc		rts

;===========================================================================
; output free leaf (code)
_outfl		rts


		END