;
;**********
;*********
;********
;*******
;******
;*****
;****
;***
;**
;* FINISHED: Why? Very simple. The hardlink (and it seems to me the soft
;  link are not implemented, and the HARD flag is ignored)
;  is made so that you will never (maybe never) set a different comment
;  to a hardlink (thanks to DPU which showed me as a hardlink is)
;
; Duplink v1.0
; written by Mauro Panigada
;
; $VER: Duplink.a v1.0 (c) 1997 by Mauro Panigada
;
; Opened: 1997-04-09
; Closed: 1997-04-10
;
; History: 1997-04-10 it is not possible!
;
; Purpose: A hard question was done by my father: how can I do a link
;   of a file (hardlink) and in the same time copy the comment? Very simple
;   I thought: I make the hardlink via AmigaDOS functions (OS), then
;   get the comment from the real file and set it to (new) hardlinked file.
;
; Template: FROM/A,TO/A,HARD/S,FORCE/S,CC=COPYCOMMENT/S,COMMENT/K
;
;  You can see it is the same for makelink, but new template-words are
;  added.
;
; CC=COPYCOMMENT/S -> copy the comment from <TO> file to <FROM> file.
; COMMENT/K -> (ignored previous if this is setted) set the comment
;              for the real file and for the linked one.
;

		incdir	"dh0:progr/assem/include/"
		include	"exec/types.i"
		include	"exec/libraries.i"
		include	"exec/exec_lib.i"
		include	"exec/memory.i"
		include	"dos/dos.i"
		include	"dos/dos_lib.i"
		include	"dos/dosasl.i"


call		MACRO
		jsr	_LVO\1(a6)
		ENDM

stov		MACRO
		move.\0	\1,_\2(a5)
		ENDM

putv		MACRO
		move.\0	_\1(a5),\2
		ENDM

clrv		MACRO
		clr.\0	_\1(a5)
		ENDM

base		MACRO
		putv.l	\1base,a6
		ENDM

tstv		MACRO
		tst.\0	_\1(a5)
		ENDM


	STRUCTURE reserved,0
		LONG	_execbase
		LONG	_dosbase

		LABEL	_array
		LONG	_fromT
		LONG	_toT
		LONG	_hardT
		LONG	_forceT
		LONG	_ccT
		LONG	_commentT

		LABEL	reserved_size



DEBUG		EQU	1


		SECTION	Duplink,CODE

		move.l	4.w,a6
		move.l	#reserved_size,d0
		move.l	#MEMF_ANY|MEMF_CLEAR,d1
		call	AllocMem
		move.l	d0,a5
		tst.l	d0
		bne.s	start
		rts

		dc.b	"$VER: Duplink v1.0 (c) 1997 by Mauro Panigada",0
		even

start		move.l	d0,(a5)

		openlib	dos,39

		move.l	d0,a6
		lea	template(pc),a0
		move.l	a0,d1
		moveq	#0,d3
		move.l	a5,d2
		add.l	#_array,d2
		call	ReadArgs
		stov.l	d0,arg
		bne.s	goneww		; gone with the wind

		call	IoErr

		IFEQ	DEBUG-1
		cmp.b	#ERROR_BAD_TEMPLATE,d0
		bne.s	nobadtemplate
		lea	badtemplate.t(pc),a0
		move.l	a0,d1
		move.l	d0,-(sp)
		call	PutStr
		bra	doerror0
nobadtemplate
		ENDC

		bra	doerror
		


goneww


		bra.s	exit

doerror		move.l	d0,-(sp)
doerror0	lea	taskname(pc),a0
		move.l	a0,d1
		;base	dos
		call	PutStr
		move.l	(sp)+,d1
		lea	taskname(pc),a0
		move.l	a0,d2
		call	PrintFault
		move.w	#$1000,-(sp)
		move.l	sp,d1
		call	PutStr
		addq.l	#2,sp
exit
		putv.l	arg,d1
		beq.s	ex0
		;base	dos
		call	FreeArgs

		move.l	(a5),a6
		closelib dos

		move.l	a5,a1
		move.l	#reserved_size,d0
		call	FreeMem
		rts




dosname		dc.b	"dos.library",0
		even
taskname	dc.b	"Duplink: ",0
		even

		IFEQ	DEBUG-1
badtemplate.t	dc.b	"*INTERNAL*",0
		even
		ENDC

		END