;     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;     *                                                         *
;     * »»»»»»»»»»»»» Hunker.a by M.P. 15/6/1994 «««««««««««««« *
;     *                                                         *
;     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

*************************************************************************
*
* -> xx/yy/zzzz
* -> v1.0
*
*    Le routines di scrittura mancano e quindi non sono attive le opzio-
*    ni -rs, -r0, -c.
*


		incdir	"dh0:progr/assem/include/"
		include	"exec/types.i"
		include	"exec/exec_lib.i"
		include	"exec/memory.i"
		include	"libraries/dos_lib.i"
		include	"libraries/dos.i"
		include	"libraries/dosextens.i"

CALL		MACRO
		jsr	_LVO\1(a6)
		ENDM


; »»»»»»»»»»»»» Cominciamo

Start		lea	VarBase(pc),a4		; no Reloc32!
		move.l	4.w,a6
		cmp.w	#1,d0
		beq	HelpExit
		clr.b	-1(a0,d0)
		move.l	a0,_ArgLine(a4)

		lea	DosName(pc),a1
		moveq	#0,d0
		CALL	OpenLibrary
		move.l	d0,_DosBase(a4)
		beq	NoDos

CheckArgs	move.l	_ArgLine(a4),a0
SkipSpace	cmp.b	#" ",(a0)+
		beq.s	SkipSpace
		suba.w	#2,a0
		moveq	#0,d1
ArgLoopS	addq.l	#1,a0
ArgLoop2	tst.b	(a0)
		beq	EndArg
		cmp.b	#"-",(a0)
		beq	ArgFound
		cmp.b	#8,d1
		beq.s	ArgLoopS
		move.l	a0,_FirstArg(a4,d1)
		addq.l	#4,d1
ArgLoop1	cmp.b	#" ",(a0)
		beq.s	NextArg
		tst.b	(a0)+
		bne.s	ArgLoop1
		bra	EndArg
NextArg		clr.b	(a0)+
ArgShort1	bra	ArgLoop2
ArgFound	cmp.b	#"s",1(a0)
		beq	S.Options
		cmp.b	#"h",1(a0)
		beq	H.Options
		cmp.b	#"r",1(a0)
		beq	R.Options
		cmp.b	#"c",1(a0)
		seq	_Flag_c(a4)
		cmp.b	#"o",1(a0)
		beq	SetOutput
		addq.l	#3,a0
ArgShort0	bra.s	ArgShort1
S.Options	cmp.b	#"h",2(a0)
		seq	_Flag_sh(a4)
		cmp.b	#"d",2(a0)
		seq	_Flag_sd(a4)
		addq.l	#4,a0
ArgShort2	bra.s	ArgShort0
H.Options	cmp.b	#"t",2(a0)
		seq	_Flag_ht(a4)
		addq.l	#4,a0
ArgShort3	bra.s	ArgShort2
R.Options	cmp.b	#"s",2(a0)
		seq	_Flag_r(a4)
		cmp.b	#"0",2(a0)
		seq	_Flag_r0(a4)
		addq.l	#4,a0
		bra.s	ArgShort3

FoundSpace	clr.b	-1(a1)
FoundSpace2	move.l	_DosBase(a4),a6
		move.l	a1,a5
		move.l	d1,d5
		move.l	a0,d1
		move.l	a0,_OutName(a4)
		move.l	#MODE_NEWFILE,d2
		CALL	Open
		tst.l	d0
		sne	_Flag_o(a4)
		move.l	d0,_Output(a4)
		move.l	a5,a0
		move.l	d5,d1
		bra.s	ArgShort3

SetOutput	addq.l	#2,a0
		move.l	a0,a1
SearchSpace	cmp.b	#" ",(a1)+
		beq	FoundSpace
		tst.b	-1(a1)
		bne.s	SearchSpace
		subq.l	#1,a1
		bra.s	FoundSpace2

EndArg		move.l	_DosBase(a4),a6
		tst.b	_Flag_o(a4)
		bne.s	OutputSetted
		lea	ConsoleName(pc),a0
		move.l	a0,d1
		move.l	#MODE_OLDFILE,d2
		CALL	Open
		tst.l	d0
		beq	NoOutput
		move.l	d0,_Output(a4)

OutputSetted	move.l	_FirstArg(a4),d1
		beq	NoSourceFile
		move.l	#MODE_OLDFILE,d2
		CALL	Open
		tst.l	d0
		beq	NoSourceFile
		move.l	d0,_SourceHand(a4)

		move.l	_SecondArg(a4),d1
		beq.s	SearchLength
		move.l	#MODE_NEWFILE,d2
		CALL	Open
		move.l	d0,_DestHand(a4)	; se zero, salta operazio-
						; ni di scrittura
SearchLength	move.l	_SourceHand(a4),d1
		moveq	#0,d2
		moveq	#OFFSET_END,d3
		CALL	Seek
		move.l	_SourceHand(a4),d1
		moveq	#0,d2
		moveq	#OFFSET_BEGINNING,d3
		CALL	Seek
		move.l	d0,_FileLength(a4)

AllocBuffers	move.l	4.w,a6
		move.l	#MEMF_PUBLIC!MEMF_CLEAR,d1
		CALL	AllocMem
		tst.l	d0
		beq	CloseDest
		move.l	d0,_SourceBuff(a4)
		tst.l	_DestHand(a4)
		beq.s	SkipAlloc
		move.l	_FileLength(a4),d0
		move.l	#MEMF_PUBLIC!MEMF_CLEAR,d1
		CALL	AllocMem
		move.l	d0,_DestBuff(a4)	; se zero, salta op.
						; di scrittura
SkipAlloc	move.l	_DosBase(a4),a6
		move.l	_SourceHand(a4),d1
		move.l	_SourceBuff(a4),d2
		move.l	_FileLength(a4),d3
		CALL	Read
		cmp.l	_FileLength(a4),d0
		bne	ErrorReading
		tst.l	d0
		bmi	DosError

		move.l	_Output(a4),d1
		lea	ClearScr.msg(pc),a0	; no Reloc32!
		move.l	a0,d2
		moveq	#2,d3
		CALL	Write

Processig	lea	WhatDoNow.msg(pc),a0
		bsr	_Write
		bsr	_Color3
		move.l	_FirstArg(a4),a0
		bsr	_Write
		bsr	_ColorClr
		bsr	_Return

		lea	PFile.msg(pc),a0
		bsr	_Write
		bsr	_Color3
		move.l	_SecondArg(a4),d0
		beq.s	NoPFile
		move.l	d0,a0
		bsr	_Write
		bsr	_Return
		bra.s	OutputFile

NoPFile		lea	NoPFile.msg(pc),a0
		bsr	_Write
		bsr	_Return

OutputFile	bsr	_ColorClr
		lea	OutFile.msg(pc),a0
		bsr	_Write
		bsr	_Color3
		tst.b	_Flag_o(a4)
		beq.s	NoOutSet
		move.l	_OutName(a4),a0
		bsr	_Write
		bra.s	Label0

NoOutSet	lea	NoOutSet.msg(pc),a0
		bsr	_Write

Label0		bsr	_ColorClr
		bsr	_DReturn

		move.l	_SourceBuff(a4),a2
		cmp.l	#$000003f3,(a2)+
		bne	NoExecutable
HunkHEADER	bsr	_Color3
		bsr	_Color02
		lea	Header.msg(pc),a0
		bsr	_Write
		bsr	_ColorClr

SkipHunkC	bsr	_Return

		lea	NOfHunk.msg(pc),a0
		move.l	a0,d2
		move.l	#NOfHunk.len,d3
		move.l	_Output(a4),d1
		CALL	Write

		moveq	#4,d0			; salta hunk name
		tst.l	(a2)
		beq.s	SkipName
		move.l	(a2),d1
		lsl.l	#2,d1
		add.l	d1,d0

SkipName	adda.l	d0,a2			; lo salta veramente!
		move.l	(a2)+,d0		; d0=number of hunks
		move.l	d0,-(sp)
		bsr	_Convert
		bsr	_ValPrt
		bsr	_Return

		lea	FromHunk.msg(pc),a0
		bsr	_Write
		move.l	(a2)+,d0
		bsr	_Convert
		bsr	_ValPrt
		lea	ToHunk.msg(pc),a0
		bsr	_Write
		move.l	(a2)+,d0
		bsr	_Convert
		bsr	_ValPrt
		bsr	_DReturn

ShowHunkLen	move.l	(sp)+,d2
		moveq	#0,d3
LenghtLoop	lea	LenOfHunk.msg(pc),a0
		bsr	_Write
		move.l	d3,d0
		bsr	_Convert
		bsr	_ValPrt
		lea	Colon.msg(pc),a0
		bsr	_Write
		move.l	(a2)+,d0
		move.l	d0,d4
		and.l	#$0fffffff,d0
		lsl.l	#2,d0
		bsr	_Convert
		bsr	_ValPrt

		bsr	_HunkType

		bsr	_Return
		addq.l	#1,d3
		cmp.l	d2,d3
		bne	LenghtLoop
		bsr	_Return

		move.l	_SourceBuff(a4),a3
		move.l	_FileLength(a4),d3
		add.l	d3,a3
CHunkLoop	cmp.l	a2,a3
		beq	Exit

		move.l	4.w,a6
		moveq	#0,d0
		move.l	#$1000,d1
		CALL	SetSignal		; testa per Ctrl-C
		andi.l	#$1000,d0
		bne	Breaked
		move.l	_DosBase(a4),a6

		move.l	(a2)+,d7
		move.l	d7,d4
		and.l	#$00ffffff,d7

HunkCode	cmp.l	#$000003e9,d7
		bne.s	HunkData
		lea	Code.msg(pc),a0
		bsr	_Hunk
		bsr	_HunkLen
		bra	CHunkLoop		; Per test Ctrl-C

HunkData	cmp.l	#$000003ea,d7
		bne.s	HunkBss
		lea	Data.msg(pc),a0
		bsr	_Hunk
		bsr	_HunkLen
		; Dovrebbe mostrare i dati se richiesto!
		bra	CHunkLoop

HunkBss		cmp.l	#$000003eb,d7
		bne.s	HunkEnd
		lea	Bss.msg(pc),a0
		bsr	_Hunk
		lea	ThisHLen.msg(pc),a0
		bsr	_Write
		move.l	(a2)+,d0
		lsl.l	#2,d0
		bsr	_Convert
		bsr	_ValPrt
		bsr	_DReturn
		bra	CHunkLoop

HunkEnd		cmp.l	#$000003f2,d7
		bne.s	HunkReloc32
		lea	End.msg(pc),a0
		bsr	_Hunk
		lea	EndPHunk(pc),a0
		bsr	_Write
		bsr	_DReturn
		bra	CHunkLoop

HunkReloc32	cmp.l	#$000003ec,d7
		bne.s	HunkDebug
		lea	Reloc32.msg(pc),a0
		bsr	_Hunk
		lea	Reloc.msg(pc),a0
		bsr	_Write
		; Dovrebbe dare piu` informazioni se richiesto!
		bra	CHunkLoop
		
HunkDebug	cmp.l	#$000003f1,d7
		bne.s	HunkSymbol
		lea	Debug.msg(pc),a0
		bsr	_Hunk
		lea	PDebug.msg(pc),a0
		bsr	_Write
		bsr	_HunkLen
		; Dovrebbe analizzarlo su richiesta!
		bra	CHunkLoop

HunkSymbol	cmp.l	#$000003f0,d7
		bne.s	HunkXxxx
		lea	Symbol.msg(pc),a0
		bsr	_Hunk
		lea	PSymbol.msg(pc),a0
		bsr	_Write
SymbolLoop	move.l	(a2)+,d0
		beq.s	SymbolExit
		lsl.l	#2,d0
		adda.l	d0,a2
		addq.l	#4,a2
		bra.s	SymbolLoop
SymbolExit	; Dovrebbe analizzarlo su richiesta!
		bra	CHunkLoop

HunkXxxx
		bra	CHunkLoop


; »»»»»»»»»»»»» Chiudiamo quello che avevamo aperto

Exit		move.l	_DosBase(a4),a6		; per sicurezza
		move.l	_Output(a4),d1
		beq.s	FreeDest
		CALL	Close

FreeDest	move.l	4.w,a6
		move.l	_DestBuff(a4),d0
		beq.s	FreeSource
		move.l	d0,a1
		move.l	_FileLength(a4),d0
		CALL	FreeMem

FreeSource	move.l	_SourceBuff(a4),d0
		beq.s	CloseDest
		move.l	d0,a1
		move.l	_FileLength(a4),d0
		CALL	FreeMem

CloseDest	move.l	_DosBase(a4),a6
		move.l	_DestHand(a4),d1
		beq.s	CloseSource
		CALL	Close

CloseSource	move.l	_SourceHand(a4),d1
		beq.s	NoOutput
		CALL	Close

NoOutput	move.l	4.w,a6
		move.l	_DosBase(a4),a1
		CALL	CloseLibrary
NoDos		rts


; »»»»»»»»»»»»» Il file sorgente e` errato

NoSourceFile	lea	NoSource.msg(pc),a0
JumpWrite	bsr	_Write
		bra	Exit


; »»»»»»»»»»»»» Errore nella lettura

ErrorReading	lea	Reading.msg(pc),a0
JLabel0		bra.s	JumpWrite


; »»»»»»»»»»»»» Errore DOS

DosError	lea	Error.msg(pc),a0
JLabel1		bra.s	JLabel0


; »»»»»»»»»»»»» Il file non e` eseguibile

NoExecutable	lea	NoExec.msg(pc),a0
		bra.s	JLabel1
		

; »»»»»»»»»»»»» Aiuto sull'uso del programma

HelpExit	lea	DosName(pc),a1
		moveq	#0,d0
		CALL	OpenLibrary
		tst.l	d0
		beq.s	NoDos
		move.l	d0,a6
		lea	ConsoleName(pc),a0
		move.l	a0,d1
		move.l	#MODE_OLDFILE,d2
		CALL	Open
		move.l	d0,d4
		beq	NoConsole
		move.l	d0,d1
		lea	Help.msg(pc),a0
		move.l	a0,d2
		moveq	#0,d0
CountLength	tst.b	(a0)+
		beq.s	FoundLength
		addq.l	#1,d0
		bra.s	CountLength
FoundLength	move.l	d0,d3
		CALL	Write
		move.l	d4,d1
		CALL	Close
NoConsole	move.l	a6,a1
		move.l	4.w,a6
		CALL	CloseLibrary
		rts


; »»»»»»»»»»»»» User break

Breaked		move.l	_DosBase(a4),a6
		bsr	_Color3
		bsr	_DReturn
		lea	UBreak.msg(pc),a0
		bsr	_Write
		bsr	_ColorClr
		bra	Exit


; »»»»»»»»»»»»» Scrive l'output

_Write		movem.l	a0/d2-d3,-(sp)
		move.l	_Output(a4),d1
		move.l	a0,d2
		moveq	#0,d3
LabelLoop	tst.b	(a0)+
		beq.s	LabelSource
		addq.l	#1,d3
		bra.s	LabelLoop
LabelSource	CALL	Write
		movem.l	(sp)+,a0/d2-d3
		rts


; »»»»»»»»»»»»» Converte da un numero binario in esadecimale ascii

_Convert	move.l	d2,-(sp)
		lea	Hex.number(pc),a0
		lea	_ConvArea(a4),a1
		moveq	#7,d2
ConvLoop	rol.l	#4,d0
		move.l	d0,d1
		and.l	#$0000000f,d1
		move.b	(a0,d1),(a1)+
		dbf	d2,ConvLoop
		move.l	(sp)+,d2
		rts


; »»»»»»»»»»»»» Mette colore 3

_Color3		movem.l	a0/d2-d3,-(sp)
		lea	Color3.msg(pc),a0
		move.l	#Color3.len,d3
DoWrite		move.l	a0,d2
		move.l	_Output(a4),d1
		CALL	Write
		movem.l	(sp)+,a0/d2-d3
		rts


; »»»»»»»»»»»»» Torna a scrivere normale

_ColorClr	movem.l	a0/d2-d3,-(sp)
		lea	ColorClr.msg(pc),a0
		move.l	#ColorClr.len,d3
		bra.s	DoWrite


; »»»»»»»»»»»»» Mette colore di fondo  2

_Color02	movem.l	a0/d2-d3,-(sp)
		lea	Color02.msg(pc),a0
		move.l	#Color02.len,d3
		bra.s	DoWrite


; »»»»»»»»»»»»» Scrive 1/2 return(s)

_Return		movem.l	a0/d2-d3,-(sp)
		moveq	#1,d3
DoReturn	lea	Return.msg(pc),a0
		bra.s	DoWrite

_DReturn	movem.l	a0/d2-d3,-(sp)
		moveq	#2,d3
		bra.s	DoReturn


; »»»»»»»»»»»»» Spazio

_Space		movem.l	a0/d2-d3,-(sp)
		moveq	#1,d3
		lea	Space.msg(pc),a0
		bra	DoWrite


; »»»»»»»»»»»»» Scrive il valore convertito

_ValPrt		movem.l	a0/d2-d3,-(sp)
		moveq	#8,d3
		lea	_ConvArea(a4),a0
		bra	DoWrite


; »»»»»»»»»»»»» Public/Chip/Fast

_HunkType	tst.b	_Flag_ht(a4)
		bne.s	SkipType

		and.l	#$f0000000,d4
		swap	d4
		cmp.w	#$0000,d4
		bne.s	NoPublic
		lea	Public.msg(pc),a0
		bsr	_Write

NoPublic	cmp.w	#$4000,d4
		bne.s	NoChip
		lea	Chip.msg(pc),a0
		bsr	_Write

NoChip		cmp.w	#$8000,d4
		bne.s	NoFast
		lea	Fast.msg(pc),a0
		bsr	_Write
NoFast
SkipType	rts


; »»»»»»»»»»»»» Scrive la lunghezza dell'hunk

_HunkLen	lea	ThisHLen.msg(pc),a0
		bsr	_Write
		move.l	(a2)+,d0
		lsl.l	#2,d0
		add.l	d0,a2			; hunk successivo
		bsr	_Convert
		bsr	_ValPrt
		bsr	_DReturn
		rts


; »»»»»»»»»»»»» Scrive l'hunk

_Hunk		move.l	a0,-(sp)
		bsr	_Color02
		bsr	_Color3
		move.l	(sp)+,a0
		bsr	_Write
		bsr	_ColorClr
		;bsr	_HunkType
		bsr	_Return
		rts


; »»»»»»»»»»»»» Dati e variabili del programma

DosName		dc.b	'dos.library',0
		even

ConsoleName	dc.b	'*',0
		even

ClearScr.msg
Help.msg	dc.b	27,'c'
		dc.b	27,'[1m',27,'[33m'
		dc.b	'Hunker V1.0',27,'[0m'
		dc.b	' Copyright (c) 1994 by Mauro Panigada',10,10
		dc.b	'USAGE: Hunker <OptList> <Source> <Dest>',10,10
		dc.b	'You can specify these options:',10
		dc.b	'	?-ss	show symbols',10
		dc.b	'	?-sd	show data hunk',10
		dc.b	'	?-rs	remove symbol and debug hunks',10
		dc.b	'	?-r0	remove zero length hunks',10
		dc.b	'	-ht	hide hunk type (CHIP/FAST/PUBLIC)',10
		dc.b	'	?-c	change hunk memory type',10
		dc.b	'	-oFILE	set my output to a file',10
		dc.b	10
		dc.b	'Specify <Dest> when you use an option which do some changes.',10
		dc.b	'The "?" says that option is not active.',10
		dc.b	10,0
		even

NoSource.msg	dc.b	10
		dc.b	27,'[43m'
		dc.b	'ERROR!',27,'[0m',27,'[3m'
		dc.b	" I can't open SOURCE or SOURCE not found!",10,10
		dc.b	27,'[0m',0
		even

Reading.msg	dc.b	10
		dc.b	27,'[43m'
		dc.b	'ERROR!',27,'[0m',27,'[3m'
		dc.b	" I can't read all SOURCE file!",10,10
		dc.b	27,'[0m',0
		even

Error.msg	dc.b	10
		dc.b	27,'[43m'
		dc.b	'ERROR!',27,'[0m',27,'[3m'
		dc.b	" Dos error while I was reading SOURCE file!",10,10
		dc.b	27,'[0m',0
		even

NoExec.msg	dc.b	10
		dc.b	27,'[43m'
		dc.b	27,'[31m'
		dc.b	'ERROR!',27,'[0m',27,'[3m'
		dc.b	" I want executable files!",10,10
		dc.b	27,'[0m',0
		even

UBreak.msg	dc.b	'*** USER BREAK',10,10,10,0
		even

Hex.number	dc.b	'0123456789ABCDEF',0
		even

Color3.msg	dc.b	27,'[33m'
Color3.len	EQU	*-Color3.msg
		even

ColorClr.msg	dc.b	27,'[0m'
ColorClr.len	EQU	*-ColorClr.msg
		even

Color02.msg	dc.b	27,'[42m'
Color02.len	EQU	*-Color02.msg
		even

Return.msg	dc.b	10,10
		even

Space.msg	dc.b	' '
		even

WhatDoNow.msg	dc.b	"Now I'm processing file: ",0
		even

PFile.msg	dc.b	'Destination file: ',0
		even

NoOutSet.msg
NoPFile.msg	dc.b	'no setted',0
		even

OutFile.msg	dc.b	'Output file: ',0
		even

Header.msg	dc.b	'HUNK HEADER',0
		even

Resident.msg	dc.b	'HUNK RESIDENT',0
		even

Unit.msg	dc.b	'HUNK UNIT',0
		even

Name.msg	dc.b	'HUNK NAME',0
		even

Code.msg	dc.b	'HUNK CODE',0
		even

Data.msg	dc.b	'HUNK DATA',0
		even

Bss.msg		dc.b	'HUNK BSS',0
		even

Reloc32.msg	dc.b	'HUNK RELOC32',0
		even

Reloc16.msg	dc.b	'HUNK RELOC16',0
		even

Reloc8.msg	dc.b	'HUNK RELOC8',0
		even

Ext.msg		dc.b	'HUNK EXT',0
		even

Symbol.msg	dc.b	'HUNK SYMBOL',0
		even

Debug.msg	dc.b	'HUNK DEBUG',0
		even

End.msg		dc.b	'HUNK END',0
		even

Overlay.msg	dc.b	'HUNK OVERLAY',0
		even

Break.msg	dc.b	'HUNK BREAK',0
		even

ExtLatt.msg	dc.b	'HUNK EXTLATT (Lattice)',0
		even

LibNode.msg	dc.b	'HUNK LIBNODE (Lattice)',0
		even

LibName.msg	dc.b	'HUNK LIBNAME (Lattice)',0
		even

NOfHunk.msg	dc.b	'	Number of hunks in this file: '
NOfHunk.len	EQU	*-NOfHunk.msg
		even

FromHunk.msg	dc.b	'	From hunk ',0
		even

ToHunk.msg	dc.b	' to hunk ',0
		even

LenOfHunk.msg	dc.b	'	Length of hunk ',0
		even

ThisHLen.msg	dc.b	'	Hunk length: ',0
		even

EndPHunk	dc.b	'	End of predecessor hunk',0
		even

Reloc.msg	dc.b	'	RelocTable of predecessor hunk',0
		even

PDebug.msg	dc.b	'	Debug of predecessor hunk',10,10,0
		even

PSymbol.msg	dc.b	'	Symbol of predecessor hunk',10,10,0
		even

Colon.msg	dc.b	': ',0
		even

Public.msg	dc.b	' PUBLIC',0
		even

Chip.msg	dc.b	' CHIP',0
		even

Fast.msg	dc.b	' FAST',0
		even

VarBase
_DosBase	EQU	0
		dc.l	0
_ArgLine	EQU	4
		dc.l	0
_FirstArg	EQU	8
		dc.l	0
_SecondArg	EQU	12
		dc.l	0
_Output		EQU	16
		dc.l	0
_Flag_sh	EQU	20
		dc.w	0
_Flag_sd	EQU	22
		dc.w	0
_Flag_r		EQU	24
		dc.w	0
_Flag_r0	EQU	26
		dc.w	0
_Flag_ht	EQU	28
		dc.w	0
_Flag_c		EQU	30
		dc.w	0
_Flag_o		EQU	32
		dc.w	0
_SourceHand	EQU	34
		dc.l	0
_DestHand	EQU	38
		dc.l	0
_FileLength	EQU	42
		dc.l	0
_SourceBuff	EQU	46
		dc.l	0
_DestBuff	EQU	50
		dc.l	0
_OutName	EQU	54
		dc.l	0
_ConvArea	EQU	58
		ds.b	8


		END